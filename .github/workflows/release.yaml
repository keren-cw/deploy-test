name: Release Promotion Workflow

on:
  release:
    types: [prereleased]
  pull_request:
    types: [closed]

permissions:
  contents: write
  pull-requests: write

jobs:
  create_approval_pr:
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    
    steps:
      - name: Generate App token
        id: generate_token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          token: ${{ steps.generate_token.outputs.token }}

      - name: Get release info
        id: release_info
        uses: actions/github-script@v6
        with:
          github-token: ${{ steps.generate_token.outputs.token }}
          script: |
            const release = await github.rest.repos.getRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: context.payload.release.id
            });
            
            core.setOutput('tag_name', release.data.tag_name);
            core.setOutput('release_name', release.data.name || release.data.tag_name);
            core.setOutput('created_at', release.data.created_at);
            core.setOutput('body', release.data.body || '');

      - name: Create release approval branch
        run: |
          git config --global user.name "Release Approval App[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git checkout -b release-approval-${{ steps.release_info.outputs.tag_name }}

      - name: Create release details file
        run: |
          mkdir -p releases
          cat > releases/${{ steps.release_info.outputs.tag_name }}.md << EOL
          # Release Approval: ${{ steps.release_info.outputs.release_name }}
          
          - **Tag**: ${{ steps.release_info.outputs.tag_name }}
          - **Release Date**: ${{ steps.release_info.outputs.created_at }}
          
          ## Release Notes
          ${{ steps.release_info.outputs.body }}
          EOL
          
          git add releases/${{ steps.release_info.outputs.tag_name }}.md
          git commit -m "docs: add release details for ${{ steps.release_info.outputs.tag_name }}"
          git push origin release-approval-${{ steps.release_info.outputs.tag_name }}

      - name: Create Pull Request
        id: create_pr
        uses: actions/github-script@v6
        with:
          github-token: ${{ steps.generate_token.outputs.token }}
          script: |
            const pr = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Release Approval: ${process.env.RELEASE_NAME}`,
              body: `This PR contains the release details for ${process.env.TAG_NAME}.
              
              Please review and approve. The release will be promoted once the PR is merged.`,
              head: `release-approval-${process.env.TAG_NAME}`,
              base: 'main'
            });
            
            // Add reviewers
            await github.rest.pulls.requestReviewers({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.data.number,
              reviewers: ['keren-cw', 'ingrid-cw']
            });
        env:
          TAG_NAME: ${{ steps.release_info.outputs.tag_name }}
          RELEASE_NAME: ${{ steps.release_info.outputs.release_name }}

  promote_release:
    if: |
      github.event_name == 'pull_request' &&
      github.event.action == 'closed' &&
      github.event.pull_request.merged == true &&
      startsWith(github.event.pull_request.head.ref, 'release-approval-')
    runs-on: ubuntu-latest
    
    steps:
      - name: Generate App token
        id: generate_token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          token: ${{ steps.generate_token.outputs.token }}

      - name: Get release from tag
        id: get_release
        uses: actions/github-script@v6
        with:
          github-token: ${{ steps.generate_token.outputs.token }}
          script: |
            const tagName = context.payload.pull_request.head.ref.replace('release-approval-', '');
            
            // Get all releases
            const releases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            
            const release = releases.data.find(r => r.tag_name === tagName && r.prerelease);
            
            if (!release) {
              core.setFailed(`No pre-release found for tag ${tagName}`);
              return;
            }
            
            core.setOutput('release_id', release.id);
            core.setOutput('tag_name', tagName);

      - name: Update release details file
        run: |
          git config --global user.name "Release Approval App[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          # Add merge timestamp to the file
          echo -e "\n## Approval Details\n- **Merged At**: ${{ github.event.pull_request.merged_at }}" >> releases/${{ steps.get_release.outputs.tag_name }}.md
          
          git add releases/${{ steps.get_release.outputs.tag_name }}.md
          git commit -m "docs: update release details with merge timestamp"
          git push origin main

      - name: Promote to production release
        if: success()
        uses: actions/github-script@v6
        with:
          github-token: ${{ steps.generate_token.outputs.token }}
          script: |
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ steps.get_release.outputs.release_id }},
              prerelease: false,
              draft: false
            });
