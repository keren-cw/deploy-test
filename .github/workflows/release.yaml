name: Release Approval

on:
  release:
    types: [published]
  pull_request:
    types: [closed]
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  pages: write
  id-token: write

jobs:
  create-approval-pr:
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    steps:
      - name: Generate App token
        id: generate_token
        uses: tibdex/github-app-token@v2
        with:
          app_id: "1097446"
          private_key: ${{ secrets.APP_PRIVATE_KEY }}

      - uses: actions/checkout@v4
        with:
          token: ${{ steps.generate_token.outputs.token }}
      
      - name: Get release details
        id: release
        run: |
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          echo "date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT
          
      - name: Create release branch
        run: |
          git config --global user.name "Release Approval App"
          git config --global user.email "release-approval[bot]@users.noreply.github.com"
          git checkout -b release-approval-${{ steps.release.outputs.tag }}
          
      - name: Update releases.json
        run: |
          mkdir -p docs/github_page/_data
          if [ ! -f docs/github_page/_data/releases.json ]; then
            echo '{"releases":[]}' > docs/github_page/_data/releases.json
          fi
          
          jq --arg tag "${{ steps.release.outputs.tag }}" \
             --arg date "${{ steps.release.outputs.date }}" \
             --arg title "Release ${{ steps.release.outputs.tag }}" \
             --arg notes "${{ github.event.release.body }}" \
             '.releases += [{
               "title": $title,
               "tag": $tag,
               "release_date": $date,
               "notes": $notes
             }]' docs/github_page/_data/releases.json > temp.json && mv temp.json docs/github_page/_data/releases.json
          
      - name: Create Pull Request
        env:
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          git add docs/github_page/_data/releases.json
          git commit -m "Release Approval: ${{ steps.release.outputs.tag }}"
          git push -u origin release-approval-${{ steps.release.outputs.tag }}
          
          gh pr create \
            --title "Release Approval: ${{ steps.release.outputs.tag }}" \
            --body "This PR was automatically created to track the approval of release ${{ steps.release.outputs.tag }}." \
            --base main \
            --head release-approval-${{ steps.release.outputs.tag }}

  update-release-status:
    if: github.event_name == 'pull_request' && github.event.pull_request.merged == true && startsWith(github.event.pull_request.head.ref, 'release-approval-')
    runs-on: ubuntu-latest
    steps:
      - name: Generate App token
        id: generate_token
        uses: tibdex/github-app-token@v2
        with:
          app_id: "1097446"
          private_key: ${{ secrets.APP_PRIVATE_KEY }}

      - uses: actions/checkout@v4
        with:
          token: ${{ steps.generate_token.outputs.token }}
          ref: main
          
      - name: Get release tag
        id: release
        run: |
          TAG=${GITHUB_HEAD_REF#release-approval-}
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "approval_date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT
          
      - name: Update releases.json
        run: |
          jq --arg tag "${{ steps.release.outputs.tag }}" \
             --arg date "${{ steps.release.outputs.approval_date }}" \
             --arg approver "${{ github.event.pull_request.user.login }}" \
             --argjson minutes "$(( ($(date -u +%s) - $(date -u -d "${{ github.event.pull_request.created_at }}" +%s)) / 60 ))" \
             '.releases |= map(
               if .tag == $tag then
                 . + {
                   "approval_date": $date,
                   "approvers": $approver,
                   "approval_time_minutes": $minutes
                 }
               else . end
             )' docs/github_page/_data/releases.json > temp.json && mv temp.json docs/github_page/_data/releases.json
          
      - name: Commit and push changes
        run: |
          git config --global user.name "Release Approval App"
          git config --global user.email "release-approval[bot]@users.noreply.github.com"
          git add docs/github_page/_data/releases.json
          git commit -m "Update release status: ${{ steps.release.outputs.tag }}"
          git push

  pages:
    needs: [update-release-status]
    if: github.event_name == 'pull_request' && github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Generate App token
        id: generate_token
        uses: tibdex/github-app-token@v2
        with:
          app_id: "1097446"
          private_key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ steps.generate_token.outputs.token }}
          ref: main
      
      - name: Setup Pages
        uses: actions/configure-pages@v4
      
      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./docs/github_page
          destination: ./_site
      
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
      
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
