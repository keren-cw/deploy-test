name: Release Promotion Workflow

on:
  release:
    types: [prereleased]

permissions:
  contents: write
  pull-requests: write
  issues: write
  deployments: write

jobs:
  request_approval:
    runs-on: ubuntu-latest
    outputs:
      deployment_id: ${{ steps.create_deployment.outputs.deployment_id }}
      issue_number: ${{ steps.create_deployment.outputs.issue_number }}
    
    steps:
      - name: Get release info and reviewers
        id: release_info
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const release = await github.rest.repos.getRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: context.payload.release.id
            });
            
            // Using fixed reviewers for testing
            const reviewers = ['keren-cw', 'ingrid-cw'];
            core.setOutput('reviewers', JSON.stringify(reviewers));
            core.setOutput('release_id', release.data.id);

      - name: Create deployment
        id: create_deployment
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.payload.release.tag_name,
              environment: 'production',
              auto_merge: false,
              required_contexts: [],
              description: `Release deployment for ${context.payload.release.tag_name}`
            });
            
            // Set deployment status to waiting
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: 'pending',
              description: 'Waiting for approval'
            });
            
            // Create approval issue
            const reviewers = JSON.parse(process.env.REVIEWERS);
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Approval needed: Release ${context.payload.release.tag_name}`,
              body: `Release ${context.payload.release.tag_name} needs approval to be promoted to production.
              
              Please review and approve by adding a :+1: reaction to this issue.
              
              Reviewers: ${reviewers.map(r => '@' + r).join(', ')}
              
              Deployment ID: ${deployment.data.id}`,
              labels: ['needs-approval']
            });
            
            // Assign reviewers to the issue
            await github.rest.issues.addAssignees({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.data.number,
              assignees: reviewers
            });
            
            core.setOutput('deployment_id', deployment.data.id);
            core.setOutput('issue_number', issue.data.number);
        env:
          REVIEWERS: ${{ steps.release_info.outputs.reviewers }}

      - name: Wait for approvals
        id: wait_approvals
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue_number = ${{ steps.create_deployment.outputs.issue_number }};
            const reviewers = ['keren-cw', 'ingrid-cw'];
            const maxAttempts = 720; // 6 hours (30 seconds * 720)
            let attempts = 0;
            
            while (attempts < maxAttempts) {
              console.log(`Checking approvals (attempt ${attempts + 1}/${maxAttempts})...`);
              
              const reactions = await github.rest.reactions.listForIssue({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue_number
              });
              
              const approvals = reactions.data
                .filter(reaction => reaction.content === '+1')
                .filter(reaction => reviewers.includes(reaction.user.login));
              
              if (approvals.length >= reviewers.length) {
                console.log('All approvals received!');
                return;
              }
              
              console.log(`Current approvals: ${approvals.length}/${reviewers.length}`);
              if (attempts < maxAttempts - 1) {
                await new Promise(resolve => setTimeout(resolve, 30000)); // Wait 30 seconds
              }
              attempts++;
            }
            
            core.setFailed('Timeout waiting for approvals');

  promote_release:
    needs: request_approval
    runs-on: ubuntu-latest
    if: success()
    
    steps:
      - name: Update deployment status
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ needs.request_approval.outputs.deployment_id }},
              state: 'success',
              description: 'Deployment approved'
            });

      - name: Promote to production release
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: context.payload.release.id,
              prerelease: false,
              draft: false
            });
            
            // Close the approval issue
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ needs.request_approval.outputs.issue_number }},
              state: 'closed'
            });
